%ul#results

%form#query
  %input{:value => 6, :type => 'hidden', :data => {:tag => "quantitative"}}
  %input{:value => 6, :type => 'hidden', :data => {:tag => "pure"}}
  %input{:value => 6, :type => 'hidden', :data => {:tag => "biological"}}
  %input{:value => 6, :type => 'hidden', :data => {:tag => "indoors"}}
  
  %div
    %button.btn.btn-mini{:data => {:value => -1, :target => "quantitative"}}
      %i.icon-minus-sign
    %span.criteria Quant.
    %button.btn.btn-mini{:data => {:value => 1, :target => "quantitative"}}
      %i.icon-plus-sign

  %div
    %button.btn.btn-mini{:data => {:value => -1, :target => "pure"}}
      %i.icon-minus-sign
    %span.criteria Pure
    %button.btn.btn-mini{:data => {:value => 1, :target => "pure"}}
      %i.icon-plus-sign

  %div
    %button.btn.btn-mini{:data => {:value => -1, :target => "biological"}}
      %i.icon-minus-sign
    %span.criteria Biology
    %button.btn.btn-mini{:data => {:value => 1, :target => "biological"}}
      %i.icon-plus-sign

  %div
    %button.btn.btn-mini{:data => {:value => -1, :target => "indoors"}}
      %i.icon-minus-sign
    %span.criteria Indoors
    %button.btn.btn-mini{:data => {:value => 1, :target => "indoors"}}
      %i.icon-plus-sign

#controls
  %button.btn.play
    %i.icon-play
  %button.btn.pause
    %i.icon-pause

- content_for :css do
  :css
    #demo{
      height: 700px;
      position: relative;
    }

    form#query{
      position: absolute;
      width: 131px;
      height: 107px;
      padding: 40px 28px;
      left: 376px;
      top: 256px;
      background: url("/images/atom/background-large.png");
    }

    form#query > div{
      margin: 5px 0 5px 10px
    }

    form#query .criteria{
      color: #FFF;
      font-weight: bold;
      font-size: 9px;
      line-height: 9px;
      text-transform: uppercase;
      text-align: center;
      width: 50px;
      display: inline-block;
    }

    #controls{
      position: absolute;
      top: 0;
      left: 0;
    }


    ul#results{
      list-style: none;
      padding: 0;
      margin: 0;
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      overflow: hidden;
    }

    ul#results li{
      position: absolute;
      width: 70px;
      height: 70px;
      padding: 13px;
      text-align: center;
      overflow: hidden;
      background: url("/images/atom/background-small.png");
      color: #FFF;
      font-weight: bold;
      font-size: 9px;
      text-transform: uppercase;

    }

- content_for :javascript do
  = javascript_include_tag "jquery-css-transform"
  = javascript_include_tag "jquery-animate-css-rotate-scale"

  :javascript
    var animationInterval;
    var time = 0;
    var targetFPS = 60;
    var lastFrameTime = 0;
    var initialOrbitalSize = 6;
    var orbitalMultiplier = 2.2;
    var initialRadius = 190;
    var radiusMultiplier = 1.6;
    var scaleMultiplier = 0.7;
    var initialSpeed = 0.5; // in degrees/second
    var speedMultiplier = 1.2;
    var orbitalCutoff = 2;
    var maximumVelocity = 50;

    var demoCanvas = $("#demo");
    var resultsCanvas = $("ul#results");

    var gravX = 470;
    var gravY = 350;

    function updateAnimation(){
      var markerTime = (new Date()).getTime();
      var elapsedTime = markerTime - lastFrameTime;
      var frames = Math.round(elapsedTime / ((1/targetFPS)*1000));
      time += frames;
      lastFrameTime = markerTime;

      for(var currentOrbitalIndex = 0; currentOrbitalIndex <= orbitalCutoff + 1; currentOrbitalIndex ++){

        var particles = resultsCanvas.find("li[data-orbital='" + (currentOrbitalIndex + 1) + "']");
        var particleIndex = 0;
        var speed = initialSpeed * Math.pow(speedMultiplier, currentOrbitalIndex);
        var orbitalRadius = initialRadius * Math.pow(radiusMultiplier, currentOrbitalIndex);
        var scale1 = Math.pow(scaleMultiplier, currentOrbitalIndex);

        particles.each(function(){
          var particle = $(this);

          var currentVelocityX = parseInt(particle.attr('data-vel-x'));
          if(isNaN(currentVelocityX)){
            currentVelocityX = 1.5;
          }
          var currentVelocityY = parseInt(particle.attr('data-vel-y'));
          if(isNaN(currentVelocityY)){
            currentVelocityY = 1.5;
          }
          var degrees = (time * speed) % 360;
          degrees -= (360/particles.length) * particleIndex;
          var radians = degrees * (Math.PI/180);
          var x0 = parseInt(particle.css('left').split("px")[0]);
          var y0 = parseInt(particle.css('top').split("px")[0]);
          var x1 = orbitalRadius * Math.cos(radians);
          var y1 = orbitalRadius * Math.sin(radians);
          x1 += gravX - 48 + 10;
          y1 += gravY - 48 + 10;

          var xd = x1 - x0;
          var yd = y1 - y0;

          if(Math.abs(xd) > currentVelocityX){
            currentVelocityX *= 1.1;
          } else if (currentVelocityX > 1){
            currentVelocityX /= 1.1;
          }

          if(Math.abs(yd) > currentVelocityY){
            currentVelocityY *= 1.1;
          } else if (currentVelocityY > 1){
            currentVelocityY /= 1.1;
          }

          var xEased = x0 + (xd/(50/currentVelocityX));
          var yEased = y0 + (yd/(50/currentVelocityY));

          var scale0 = parseFloat(particle.scale());
          var scaleEased = scale0 + ((scale1 - scale0)/50);

          particle.css({left: xEased + "px", top: yEased + "px"});
          particle.scale(scaleEased);
          particleIndex++;
        });
      }
    };

    function startAnimation(){
      if(animationInterval == undefined){
        lastFrameTime = (new Date()).getTime();
        animationInterval = setInterval(updateAnimation, (1/targetFPS)*1000);
      }
    };

    function pauseAnimation(){
      clearInterval(animationInterval);
      animationInterval = undefined;
    };

    function orbitalSize(orbital){
      return Math.pow(orbitalMultiplier, orbital - 1) * initialOrbitalSize;
    }

    var setupFishpond = function(fishpond){ // you must define this function in your demo, if you want hooks to the fishpond

      fishpond.resultsUpdated(function(results){
        var currentOrbitalIndex = 0;
        var currentOribtalSize = 0;

        resultsCanvas.find("li").each(function(){
          $(this).attr('data-orbital', orbitalCutoff + 1);
        });

        for(var i = 0; i < results.length; i++){
          var result = results[i];
          var fish = result.fish;

          var li = resultsCanvas.find("li[data-id='" + fish.id + "']");
          if(li.length == 0){
            var li = $("<li></li>");
          }

          if(currentOribtalSize + 1 > orbitalSize(currentOrbitalIndex + 1) && currentOrbitalIndex + 1 <= orbitalCutoff){
            currentOrbitalIndex++;
            currentOribtalSize = 0;
          }

          li.html(fish.title);
          li.attr('data-id', fish.id);
          li.attr('data-orbital', currentOrbitalIndex + 1);
          li.attr('data-score', result.score);

          if(resultsCanvas.find("li[data-id='" + fish.id + "']").length == 0){
            li.scale(1.0);
            li.css({left: gravX + "px", top: gravY + "px"});
            resultsCanvas.append(li);
          }
          currentOribtalSize++;
        }
      });

      fishpond.ready(function(pond){
        $("#loading").fadeOut(0);
        $("#demo").fadeIn(400);
        $("#query .btn").each(function(){
          $(this).click(function(e){
            e.preventDefault();
            var btn = $(this);
            var input = $("#query input[data-tag='" + btn.attr('data-target') + "']");
            input.val(parseInt(input.val()) + parseInt(btn.attr('data-value')));

            if(input.val() < 1) input.val(1);
            if(input.val() > 11) input.val(11);

            fishpond.query({
              quantitative: $("#query input[data-tag='quantitative']").val(),
              pure: $("#query input[data-tag='pure']").val(),
              biological: $("#query input[data-tag='biological']").val(),
              indoors: $("#query input[data-tag='indoors']").val()
            }, {});
          });
        });

        $(".btn.play").click(function(e){
          e.preventDefault();
          startAnimation();
        });
        $(".btn.pause").click(function(e){
          e.preventDefault();
          pauseAnimation();
        });

        startAnimation();
        fishpond.query({}, {});
      });

      fishpond.loading(function(percent){
        console.log("Demo loading " + (percent * 100) + "%");
      });

    };
