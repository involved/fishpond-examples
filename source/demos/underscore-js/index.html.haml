.page-header
  %h1 Javascript Templates
  %br
  .row
    .span9
      %p
        %strong Powered by: 
        = link_to "Underscore JS", "http://underscorejs.org/", :target => "_blank"

.row
  .span5
    %form#fishpond.form-horizontal.well
      %h2 Tags
      %fieldset.tags
        -# Sliders Dynamically added

      %h2 Filters     
      %fieldset.filters
        .control-group
          .control-label
            Only show:

      %span.label
        Filters currently not hooked up.

  .span6.offset1
    %h2 Results
    #results
      %ul.thumbnails

#emptyModal.modal.hide
  .modal-body.loading
    // Empty


- content_for :css do
  :css
    .loading .shortlist{
      display: none;
    }
    
    .loaded .shortlist{
      display: block;
    }

    .shortlist.active{
      border: red 1px solid;
    }


    #results ul li .thumbnail{
      min-height: 100px;
      text-align: center;
      position: relative;
      //background: #fff;
    }
      #results ul li.loading .thumbnail{
        background: url(/images/common/loading.gif) no-repeat center center;
        color: #999;
      }

      #results ul li .thumbnail .title{
        height: 20px;
        display: block;
      }

    .modal-body.loading{
      background: #fff url(/images/common/loading.gif) no-repeat center center;
      min-height: 200px;
    }
       #results ul li .thumbnail .details{
        padding-top: 10px;
       }

        #results ul li .thumbnail .details{
          width: 100%;
          height: 120px;
          text-align: center;
          margin-bottom: 5px;
        }

       #results ul li .thumbnail .shortlist{
        position: absolute;
        top: -5px;
        left: -5px;
      }


- content_for :javascript do
  = javascript_include_tag "https://raw.github.com/d0ugal/locache/master/build/locache.js"
  = javascript_include_tag "http://underscorejs.org/underscore.js"

  /////////////////////////////////////////
  // JAVSCRIPT TEMPLATES
  /////////////////////////////////////////

  // Fish Template
  %script{:id => "fishTemplate", :type => "text/html"}
    %li{ :data => { :id => "{{ fish.id }}" }, :class => "{{ status }} span2" }
      .thumbnail
        %strong.title {{ fish.title }}      
        .details
          {[ if (!_.isEmpty(metadata)) { ]}
          {{ fishDetailsData }}
          {[ } ]}


  // Tags Template
  %script{:id => "tagsTemplate", :type => "text/html"}
    .control-group
      %label.control-label
        {{ name }}
        %output (10)
      .controls
        %input{ :id => "query_tag_{{ token }}", :name => "query[tags][{{ token }}]", :type => "hidden", :value => "10", :data => { :slug => "{{ name }}" } }
        .slider.span2{ :data => { :target => "query[tags][{{ token }}]" } }


  // Filters Template
  %script{:id => "filtersTemplate", :type => "text/html"}
    .control
      %label.checkbox
        %input{ :id => "query_filter_{{ token.id }}", :name => "query[filters][{{ token.id }}]", :type => "checkbox", :value => "0", :data => { :slug => "{{ token.slug }}" } }
        {{ token.name }}


  // Fish Details Template
  %script{:id => "fishDetailsTemplate", :type => "text/html"}
    %a{ :href => "#", :data => { :toggle => "modal" } }
      %img{ :src => "{{ metadata.thumbnail_url }}", :alt => "{{ metadata.title }}", :class => "profile" }
      {[ if (!_.isEmpty(shortlist)) { ]}          
      %a{ :href => "#", :class => "btn btn-mini {{ shortlist.shortlistClass }}", :data => { :id => "{{ metadata.id }}", :toggle => "shortlist" } }
        %i.icon-star
        %span
          {{ shortlist.wording }}
      {[ } ]}


  // Modal Template
  %script{:id => "modalTemplate", :type => "text/html"}
    .modal
      .modal-header
        %button.close{"data-dismiss" => "modal"} Ã—
        %h3 {{ metadata.title }}
      .modal-body
        .row
          .span2
            %img{:alt => "{{ metadata.title }}", :src => "{{ metadata.thumbnail_url }}"}/
          .span4
            %p {{ metadata.description }}
            = link_to "Find out more", "{{ metadata.url }}", :target => "_blank"
            %br
            %br
            {[ if (!_.isEmpty(shortlist)) { ]}
            %a{ :href => "#", :class => "btn btn-mini {{ shortlist.shortlistClass }}", :data => { :id => "{{ metadata.id }}", :toggle => "shortlist" } }
              %i.icon-star
              %span
                {{ shortlist.wording }}
            {[ } ]}
      .modal-footer
        %a.btn{"data-dismiss" => "modal", :href => "#"} Close


  :javascript
    var setupFishpond = function(fishpond){ // you must define this function in your demo, if you want hooks to the fishpond
        
      // Change underscore.js tenplate settings to use moustache syntax
      _.templateSettings = {
        evaluate : /\{\[([\s\S]+?)\]\}/g,
        interpolate : /\{\{(.+?)\}\}/g
      };

      /////////////////////////////////////////
      // Fishpond loading
      /////////////////////////////////////////
      fishpond.loading(function(percent){
        $("#loading .progress").removeClass("progress-striped");
        $("#loading .bar").css({width: (percent * 100) + "%"});

        // Clear LocalStorage of fish data
        locache.flush();
      });


      /////////////////////////////////////////
      // Fishpond Ready
      /////////////////////////////////////////
      fishpond.ready(function(pond){
        // Loading transitions
        $("#loading").fadeOut(0);
        $("#demo").fadeIn(400);
        $("#demo h1").append(' "' + pond.name + '"');       

        // Setup Templates
        var tagsTemplate = _.template($( "#tagsTemplate" ).html());
        var filtersTemplate = _.template($( "#filtersTemplate" ).html());

        // Generate Tags
        $.each(pond.tag_ids, function(name, token){ 
          var tagsData = { 
            name  : name, 
            token : token
          }
          $("fieldset.tags").append( tagsTemplate( tagsData ));
        });

        // Generate Filters
        $.each(pond.filters, function(index, token){
          var filtersData = { 
            token : token
          }
          $("fieldset.filters .control-group").append( filtersTemplate( filtersData ));
        });

        // jQuery UI Slider
        $(".slider").slider({
          value: 10,
          min: 0,
          max: 20,
          step: 1,
          slide: function(e, ui){
            var output = $(this).parents('.control-group').find('output');
            var hiddenField = $("input[name='" + $(this).data('target') + "']");
            var value = ui['value'];

            if(value.toString() != hiddenField.val().toString()){
              hiddenField.val(value);
              output.html(output.html().split("(")[0] + "(" + value.toString() + ")");

              var tags = {};
              var filters = {};
              $("form#fishpond input").each(function(){
                //console.error($(this).data('slug'));
                tags[$(this).data('slug')] = $(this).val();
              });
              fishpond.query(tags, filters);
            }
          }
        });

        // Init Shorlist Manager
        shortlistListener();

        // Run Query
        fishpond.query({}, {});
      });


      /////////////////////////////////////////
      // Results Updated
      /////////////////////////////////////////
      fishpond.resultsUpdated(function(results){
        // Clear old results
        $("#results ul").empty();

        /////////////////////////////////////////
        // Generate Results
        /////////////////////////////////////////
        for(var i = 0; i < results.length; i++){
          var result = results[i]
          var fishID = result.fish.id;
          var fish = fishManager(fishID);
                    
          if (fish.getMetadata() === null){
            // [If Metadata is NOT cached] - This will go away and load Metadata and update template on completion
            $.when( fish.setMetadata(results[i]) ).then( function(result){ 
              fish = fishManager(result.fish.id); // After Metadata has loaded then passback 'result/fish' into queue             
              fish.updateTemplate();
            });
          } 
          
          fish.generateTemplate(result); // Gerenate Fish - This will create an empty shell or a complete Fish (depending if the Metadata is loaded). The empty shell will by dynamically updated after Metadata has loaded.
        }
      });


      /////////////////////////////////////////
      // Fish Manager
      /////////////////////////////////////////
      var fishManager = function (fishID) {
        var fishDetailsTemplate = _.template($( "#fishDetailsTemplate" ).html());
        var shortlist = shortlistManager(fishID);
        
        return {
          setMetadata: function (result) {
            //console.log("Result -> " + fishID);
            var defered = new $.Deferred();
            fishpond.get_fish(fishID, function(data){
              locache.set("metadata-"+fishID, data);
              defered.resolve(result);
            });    
            return defered.promise();
          },
          getMetadata: function () {
            return locache.get("metadata-"+fishID);
          },
          generateTemplate: function (result) {
            var currentFish = this;
            var fishTemplate = _.template($( "#fishTemplate" ).html());
            var metadata = currentFish.getMetadata();
            var resultData = {
              fish            : result.fish, 
              fishDetailsData : currentFish.fishDetails(),  // Pass a template into a template
              metadata        : metadata,
              status          : metadata ? "loaded" : "loading",
              shortlist       : shortlist.template()        // Pass in shortlistButton Object
            }
            // Update Results list
            $('#results ul').append( fishTemplate( resultData ));
          },
          updateTemplate: function () {
            var currentFish = this;
            var fishResult = $("#results").find("li[data-id='" + fishID + "']");
            var fishDetailsData = { 
              metadata        : currentFish.getMetadata(),
              shortlist       : shortlist.template()
            }
            fishResult.removeClass("loading").addClass("loaded");

            // Once Metadata is loaded then inject it into result.
            return fishResult.find(".details").html( fishDetailsTemplate( fishDetailsData ));
          },
          fishDetails: function () {
            var currentFish = this;
            var fishDetailsTemplate = _.template($( "#fishDetailsTemplate" ).html());
            var fishDetailsData;

            // If Metadata has loaded then populate 'Details Template'
            if (currentFish.getMetadata()) {
              fishDetailsData = { 
                metadata      : currentFish.getMetadata(),
                shortlist     : shortlist.template()
              }
              return fishDetailsTemplate( fishDetailsData );
            }
          } 
        };
      };


      /////////////////////////////////////////
      // Modal Manager
      /////////////////////////////////////////
      var modalManager = function () {
        $("#results").on("click", "[data-toggle='modal']", function(event){
          event.preventDefault();
          var fishID = $(this).closest("li").data('id');
          var metadata = locache.get("metadata-"+fishID);
          var shortlist = shortlistManager(fishID);

          // Clone empty Modal template and display
          var fishModal = $('#emptyModal').clone().attr("id",fishID);
          fishModal.modal('show');

          console.log("[" + fishID + "] - " + shortlist.isShortlisted());

          // Load data into empty Modal.
          var modalTemplate = _.template($( "#modalTemplate" ).html());
          var modalData = { 
            metadata  : metadata,
            shortlist : shortlist.template()
          }
          if (fishModal.attr("id") === metadata.id){
            fishModal.append( modalTemplate( modalData ));
          }
        });
      }();


      /////////////////////////////////////////
      // Shortlist Manager
      /////////////////////////////////////////
      var shortlistManager = function(fishID) {
        var shortlistStatus;

        return {
          isShortlisted: function () {
            // Check if Shortlist status has been set. If not then set it to false otherwise return the cached value.

            shortlistStatus = locache.get("shortlist-"+fishID);
            if (shortlistStatus === "" || _.isNull(shortlistStatus) || _.isUndefined(shortlistStatus)){
              // Cache Shortlist status
              locache.set("shortlist-"+fishID, false);
              return shortlistStatus = false;
            }
            return shortlistStatus;
          },
          template: function () {
            this.isShortlisted();
            var shortlistButton = {
              status          : shortlistStatus,
              wording         : shortlistWording(shortlistStatus),
              shortlistClass  : shortlistStatus ? "shortlisted btn-warning" : ""
            }
            return shortlistButton;
          }
        }
      }

      function shortlistWording(shortlistStatus) {
        return shortlistStatus ? "Remove" : "Shortlist";
      }

      /////////////////////////////////////////
      // Shortlist Listener
      /////////////////////////////////////////
      function shortlistListener() {
        $("body").off();
        $("body").on("click", "[data-toggle='shortlist']", function(event){
          event.preventDefault();

          // Determine Fish ID
          fishID = $(this).closest("[data-id]").data("id");
        
          // Toggle Shortlist status
          var shortlistStatus = locache.get("shortlist-"+fishID);
          if (shortlistStatus === "" || _.isNull(shortlistStatus) || _.isUndefined(shortlistStatus)){
            shortlistStatus = true;
          } else {
            shortlistStatus = !shortlistStatus;
          }

          // Cache new Shortlist status
          locache.set("shortlist-"+fishID, shortlistStatus);

          // Update all instances of Shortlist button
          $("[data-id='"+ fishID +"'][data-toggle='shortlist'] ").each(function(index) {
            $(this).toggleClass("shortlisted", shortlistStatus);
            $(this).toggleClass("btn-warning", shortlistStatus);
            $(this).find("span").html(shortlistWording(shortlistStatus));
          });
        });
      }

    };