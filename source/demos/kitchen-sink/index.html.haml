---
layout: demo_layout
---

.page-header
  %h1 Kitchen Sink - Demo
  %br
  .row
    .span9
      %p
        %strong Powered by:
        %ul
          %li 
            = link_to "Underscore JS Templates", "http://underscorejs.org/", :target => "_blank"
            (Javascript Templates)
          %li
            = link_to "Locache", "http://locachejs.org/", :target => "_blank"
            (Javascript client-side caching)
          %li
            = link_to "jQuery Quicksand Plugin", "http://razorjack.net/quicksand/", :target => "_blank"
            (Filtering and Animation)
          %li
            = link_to "jQuery UI Slider", "http://jqueryui.com/demos/slider/", :target => "_blank"
            (Form UI controls)
          %li
            = link_to "jQuery Deferred.Promise()", "http://api.jquery.com/deferred.promise/", :target => "_blank"
            (Allows asynchronous javascript functions)
    .span2.offset1
      %span.label.label-success Metadata enabled
      %br 
      %span.label.label-important Filters disabled

.row
  .span5
    %form#fishpond.form-horizontal.well
      %h2 Tags
      %fieldset.tags
        -# Sliders Dynamically added

      %h2 Filters     
      %fieldset.filters
        .control-group
          .control-label
            Only show:

      %span.label
        Filters currently not hooked up.

  .span6.offset1
    %h2 Results
    #results
      %ul.thumbnails


#emptyModal.modal.hide
  .modal-body.loading
    // Empty


- content_for :css do
  :css
    .loading .shortlist{
      display: none;
    }
    
    .loaded .shortlist{
      display: block;
    }

    .shortlist.active{
      border: red 1px solid;
    }


    #results ul li .thumbnail{
      min-height: 100px;
      text-align: center;
      position: relative;
      background: #fff;
    }
      #results ul li.loading .thumbnail{
        background: url(/images/common/loading.gif) no-repeat center center;
        color: #999;
      }

      #results ul li .thumbnail .title{
        height: 20px;
        display: block;
      }
       
       #results ul li .thumbnail .details{
        padding-top: 10px;
       }

        #results ul li .thumbnail .details{
          width: 100%;
          height: 120px;
          text-align: center;
          margin-bottom: 5px;
        }

       #results ul li .thumbnail .shortlist{
        position: absolute;
        top: -5px;
        left: -5px;
      }

    /* Modal */
    .modal{
      width:940px;
      margin-left:-470px;
      top: 40%;
    }
      .modal-body{
        max-height: 800px;
      }
        .modal-body.loading{
          background: #fff url(/images/common/loading.gif) no-repeat center center;
          min-height: 200px;
        }



  /////////////////////////////////////////
  // REQUIRED EXTERNAL JAVASCRIPT
  /////////////////////////////////////////

- content_for :javascript do
  = javascript_include_tag "https://raw.github.com/d0ugal/locache/master/build/locache.js"
  = javascript_include_tag "http://underscorejs.org/underscore.js"
  = javascript_include_tag "https://raw.github.com/razorjack/quicksand/master/jquery.quicksand.js"
  

  /////////////////////////////////////////
  // JAVASCRIPT TEMPLATES 
  // Powered by Underscore.js 'Templates'
  /////////////////////////////////////////

  // Fish Template
  %script{:id => "fishTemplate", :type => "text/html"}
    %li{ :data => { :id => "{{ fish.id }}" }, :class => "{{ status }} span2" }
      .thumbnail
        %strong.title {{ fish.title }}      
        .details
          {[ if (!_.isEmpty(metadata)) { ]}
          {{ fishDetailsData }}
          {[ } ]}


  // Tags Template
  %script{:id => "tagsTemplate", :type => "text/html"}
    .control-group
      %label.control-label
        {{ name }}
        %output (10)
      .controls
        %input{ :id => "query_tag_{{ token }}", :name => "query[tags][{{ token }}]", :type => "hidden", :value => "10", :data => { :slug => "{{ name }}" } }
        .slider.span2{ :data => { :target => "query[tags][{{ token }}]" } }


  // Filters Template
  %script{:id => "filtersTemplate", :type => "text/html"}
    .control
      %label.checkbox
        %input{ :id => "query_filter_{{ token.id }}", :name => "query[filters][{{ token.id }}]", :type => "checkbox", :value => "0", :data => { :slug => "{{ token.slug }}" } }
        {{ token.name }}


  // Fish Details Template
  %script{:id => "fishDetailsTemplate", :type => "text/html"}
    %a{ :href => "#", :data => { :toggle => "modal" } }
      %img{ :src => "{{ metadata.thumbnail_url }}", :alt => "{{ metadata.title }}", :class => "profile" }
      {[ if (!_.isEmpty(shortlist)) { ]}          
      %a{ :href => "#", :class => "btn btn-mini {{ shortlist.shortlistClass }}", :data => { :id => "{{ metadata.id }}", :toggle => "shortlist" } }
        %i.icon-star
        %span
          {{ shortlist.wording }}
      {[ } ]}


  // Modal Template
  %script{:id => "modalTemplate", :type => "text/html"}
    .modal-header
      %button.close{"data-dismiss" => "modal"} Ã—
      %h3 {{ metadata.title }}
    .modal-body
      .row
        .span3
          %img{:alt => "{{ metadata.title }}", :src => "{{ metadata.image_url }}"}/
        .span8
          %p {{ metadata.description }}
          = link_to "Find out more", "{{ metadata.url }}", :target => "_blank"
          %br
          %br
          {[ if (!_.isEmpty(shortlist)) { ]}
          %a{ :href => "#", :class => "btn btn-mini {{ shortlist.shortlistClass }}", :data => { :id => "{{ metadata.id }}", :toggle => "shortlist" } }
            %i.icon-star
            %span
              {{ shortlist.wording }}
          {[ } ]}
          
          %a{ :href => "./kitchen-sink/comments.html#disqus_thread", :class => "dq_comment btn btn-mini", :data => { :id => "{{ metadata.id }}", :toggle => "shortlist" } }
            %i.icon-comment
            %span
              View Comments
          
      .row
        .comments.span11
          // disqus comments
          .comment_box{ :id => "comment_{{ metadata.id }}" }
                
        
    .modal-footer
      %a.btn{"data-dismiss" => "modal", :href => "#"} Close




  :javascript
    var setupFishpond = function(fishpond){ // you must define this function in your demo, if you want hooks to the fishpond

      // Setup global variables
      var resultsList = $("#results ul");
      var quicksandEnabled = true;
      var quicksandList;
        
      // Change underscore.js tenplate settings to use moustache syntax
      _.templateSettings = {
        evaluate : /\{\[([\s\S]+?)\]\}/g,
        interpolate : /\{\{(.+?)\}\}/g
      };

      /////////////////////////////////////////
      // Fishpond loading
      /////////////////////////////////////////
      fishpond.loading(function(percent){
        $("#loading .progress").removeClass("progress-striped");
        $("#loading .bar").css({width: (percent * 100) + "%"});

        // Clear LocalStorage of fish data. This is optional but is in here for Development purposes
        locache.flush();
      });


      /////////////////////////////////////////
      // Fishpond Ready
      /////////////////////////////////////////
      fishpond.ready(function(pond){
        // Loading transitions
        $("#loading").fadeOut(0);
        $("#demo").fadeIn(400);
        $("#demo h1").append(' "' + pond.name + '"');       

        // Setup Templates
        var tagsTemplate = _.template($( "#tagsTemplate" ).html());
        var filtersTemplate = _.template($( "#filtersTemplate" ).html());

        // Generate Tags
        $.each(pond.tag_ids, function(name, token){ 
          var tagsData = { 
            name  : name, 
            token : token
          }
          $("fieldset.tags").append( tagsTemplate( tagsData ));
        });

        // Generate Filters
        $.each(pond.filters, function(index, token){
          var filtersData = { 
            token : token
          }
          $("fieldset.filters .control-group").append( filtersTemplate( filtersData ));
        });

        // jQuery UI Slider
        $(".slider").slider({
          value: 10,
          min: 0,
          max: 20,
          step: 1,
          slide: function(e, ui){
            var output = $(this).parents('.control-group').find('output');
            var hiddenField = $("input[name='" + $(this).data('target') + "']");
            var value = ui['value'];

            if(value.toString() != hiddenField.val().toString()){
              hiddenField.val(value);
              output.html(output.html().split("(")[0] + "(" + value.toString() + ")");

              var tags = {};
              var filters = {};
              $("form#fishpond input").each(function(){
                tags[$(this).data('slug')] = $(this).val();
              });
              fishpond.query(tags, filters);
            }
          }
        });

        // Init Shorlist Manager
        shortlistListener();

        // Init Comments Manager
        commentsManager(pond);

        // Run Query
        fishpond.query({}, {});
      });


      /////////////////////////////////////////
      // Results Updated
      /////////////////////////////////////////
      fishpond.resultsUpdated(function(results){
        var templateUpdateQueue = [];
        
        // Clear old results
        if (quicksandEnabled){
          quicksandList = $("<ul></ul>");  
        } else {
          resultsList.empty(); 
        }

        /////////////////////////////////////////
        // Generate Results
        /////////////////////////////////////////
        for(var i = 0; i < results.length; i++){
          var result = results[i]
          var fishID = result.fish.id;
          var fish = fishManager(fishID);

          if (fish.getMetadata() === null){
            // If Metadata is NOT cached
            $.when( fish.setMetadata(result) ).then( function(result){ // This will go away and Load & Cache the Metadata then pass back the 'Result' on completion. (Uses jQuery deferred).
              fish = fishManager(result.fish.id); // After Metadata has loaded then re-initalise 'Fish' as it is no longer in the queue.  
              fish.updateTemplate(); // Update the Fish Template with the newly aquired Metadata. 
            });
          } 
          
          fish.generateTemplate(result); // Generate Fish - This will either create a 'partial/empty Fish' - or - a 'complete Fish' (depending if the Metadata is loaded). In the event the Metadata is not loaded then the partial Fish will be dynamically updated later after Metadata has loaded.
        }

        // Check for animation/filtering method
        if (quicksandEnabled) sortResults();
      });


      /////////////////////////////////////////
      // Fish Manager
      /////////////////////////////////////////
      var fishManager = function (fishID) {
        var fishDetailsTemplate = _.template($( "#fishDetailsTemplate" ).html());
        var shortlist = shortlistManager(fishID);
        
        return {
          setMetadata: function (result) {
            var defered = new $.Deferred();  // Uses jQuery deferred to load Fish Metadata and then pass it back on completion.
            fishpond.get_fish(fishID, function(metadata){

              // Parse Metadata and provide fallbacks to avoid breakages
              var parsedMetadata = {
                description   : _.isNull(metadata.description) ? "No description set" : metadata.description,
                image_url     : _.isNull(metadata.image_url) ? "http://placehold.it/300x300" : metadata.image_url,
                thumbnail_url : _.isNull(metadata.thumbnail_url) ? "http://placehold.it/120x120" : metadata.thumbnail_url,
                url           : (metadata.url === "" || _.isNull(metadata.url)) ? "#" : metadata.url,
                id            : metadata.id,
                title         : metadata.title
              }
              
              locache.set("metadata-"+fishID, parsedMetadata);
              defered.resolve(result);
            });    
            return defered.promise();
          },
          getMetadata: function () {
            return locache.get("metadata-"+fishID);
          },
          generateTemplate: function (result) {
            var currentFish = this;
            var fishTemplate = _.template($( "#fishTemplate" ).html());
            var metadata = currentFish.getMetadata();
            var resultData = {
              fish            : result.fish, 
              fishDetailsData : currentFish.fishDetails(),  // Pass 'details' template into this template
              metadata        : metadata,
              status          : metadata ? "loaded" : "loading",
              shortlist       : shortlist.template()        // Pass in 'shortlistButton' Object
            }

            // Update Results list
            if (quicksandEnabled){
              quicksandList.append( fishTemplate( resultData ));  // Use Quicksand plugin to handle filtering + animations.         
            } else {
              resultsList.append( fishTemplate( resultData ));    // Fall back to non-animated filtering.
            }
          },
          updateTemplate: function () {
            var currentFish = this;
            var fishResult = resultsList.find("li[data-id='" + fishID + "']");
            var fishDetailsData = { 
              metadata        : currentFish.getMetadata(),
              shortlist       : shortlist.template()
            }
            fishResult.removeClass("loading").addClass("loaded");

            // Once Metadata is loaded then inject it into result.
            return fishResult.find(".details").html( fishDetailsTemplate( fishDetailsData ));
          },
          fishDetails: function () {
            var currentFish = this;
            var fishDetailsTemplate = _.template($( "#fishDetailsTemplate" ).html());
            var fishDetailsData;

            // If Metadata has loaded then populate 'Details Template'
            if (currentFish.getMetadata()) {
              fishDetailsData = { 
                metadata      : currentFish.getMetadata(),
                shortlist     : shortlist.template()
              }
              return fishDetailsTemplate( fishDetailsData );
            }
          } 
        };
      };


      /////////////////////////////////////////
      // Modal Manager
      /////////////////////////////////////////
      var modalManager = function () {
        resultsList.on("click", "[data-toggle='modal']", function(event){
          event.preventDefault();
          var fishID = $(this).closest("li").data('id');
          var metadata = locache.get("metadata-"+fishID);
          var shortlist = shortlistManager(fishID);

          // Clone empty Modal template and display
          var fishModal = $("#emptyModal").clone().attr("id",fishID);
          fishModal.modal("show");

          // Load data into empty Modal.
          var modalTemplate = _.template($( "#modalTemplate" ).html());
          var modalData = { 
            metadata  : metadata,
            shortlist : shortlist.template(),
            comments : "http://ifish.disqus.com/combination_widget.js?num_items=5&hide_mods=0&color=blue&default_tab=people&excerpt_length=200"
          }
          if (fishModal.attr("id") === metadata.id){
            fishModal.empty().append( modalTemplate( modalData ));
          }
        });
      }();

      /////////////////////////////////////////
      // Shortlist Manager
      /////////////////////////////////////////
      var shortlistManager = function(fishID) {
        var shortlistStatus;

        return {
          isShortlisted: function () {
            // Check if Shortlist status has been set. If not then set it to False, otherwise return the cached value.

            shortlistStatus = locache.get("shortlist-"+fishID);
            if (shortlistStatus === "" || _.isNull(shortlistStatus) || _.isUndefined(shortlistStatus)){
              locache.set("shortlist-"+fishID, false); // Cache Shortlist status
              return shortlistStatus = false;
            }
            return shortlistStatus;
          },
          template: function () {
            this.isShortlisted();
            var shortlistButton = {
              status          : shortlistStatus,
              wording         : shortlistWording(shortlistStatus),
              shortlistClass  : shortlistStatus ? "shortlisted btn-warning" : ""
            }
            return shortlistButton;
          }
        }
      }

      function shortlistWording(shortlistStatus) {
        return shortlistStatus ? "Remove" : "Shortlist";
      }

      /////////////////////////////////////////
      // Shortlist Listener
      /////////////////////////////////////////
      function shortlistListener() {
        $("body").off();
        $("body").on("click", "[data-toggle='shortlist']", function(event){
          event.preventDefault();

          // Determine Fish ID
          fishID = $(this).closest("[data-id]").data("id");
        
          // Toggle Shortlist status
          var shortlistStatus = locache.get("shortlist-"+fishID);
          shortlistStatus = (shortlistStatus === "" || _.isNull(shortlistStatus) || _.isUndefined(shortlistStatus)) ? true : !shortlistStatus;  // If Shortlist status is empty, null or undefined then set it to True, otherwise toggle current status.

          // Cache new Shortlist status
          locache.set("shortlist-"+fishID, shortlistStatus);

          // Update all instances of Shortlist button
          $("[data-id='"+ fishID +"'][data-toggle='shortlist'] ").each(function(index) {
            $(this).toggleClass("shortlisted", shortlistStatus);
            $(this).toggleClass("btn-warning", shortlistStatus);
            $(this).find("span").html(shortlistWording(shortlistStatus));
          });
        });
      }

      /////////////////////////////////////////
      // Sort Results (quicksand)
      /////////////////////////////////////////
      function sortResults() {
        if(resultsList.find("li").length == 0) {
          resultsList.append(quicksandList.find("li"));
        } else {
          resultsList.quicksand(quicksandList.find("li"), {
            // Do nothing
          }, function() {
            //console.log('[Results] reordered');
            $("#results").removeClass("reordering");

            // Update templates for Fish in Queue
           // $.each(templateUpdateQueue, function(index, fishID) {
              //updateTemplate(fishID);
            //});
          });
        }
      }

      /////////////////////////////////////////
      // Comments Manager
      /////////////////////////////////////////
      
      function commentsManager(pond) {
        // Powered by Disqus
        $("body").off();
        $("body").on("click", ".dq_comment", function(event){
          event.preventDefault();
          console.log("comments clicked");

          var id = $(this).data("id");
          var href = $(this).attr("href");
          var src = href.substring(0,href.length-14); // Remove #disqus_thread

          if ($("#comment_"+id).is(':visible'))
            $("#comment_"+id).html('');
          else
            $("#comment_"+id).append('<iframe scrolling="yes" frameborder="0" width="100%" height="400" src="'+src+'" class="comment_frame"></iframe>');

          $("#comment_"+id).toggle('slow');
        })
      

       /* var disqus_shortname = 'ifish';
        var disqus_developer = 1;
        var disqus_identifier = pond.id;
        var disqus_title = pond.name;
        var disqus_category_id = '1234'
        */
   
        /*(function() {
          var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
          dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
          (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();

        function disqus_config() {
          this.callbacks.onReady = [function() {
            var frameHeight = $(document).height();
            $('iframe.comment_frame', top.document).attr("height", frameHeight)
          }];
          this.callbacks.onNewComment = [function() {
            var frameHeight = $(document).height();
            $('iframe.comment_frame', top.document).attr("height", frameHeight)
          }];
        }*/
        
      }
    };